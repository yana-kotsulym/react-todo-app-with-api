{"version":3,"sources":["utils/fetchClient.ts","utils/enums.ts","components/Header.tsx","components/Footer.tsx","components/ErrorNotification.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","Filter","ErrorType","client","Header","query","onChange","onSubmit","isLoading","activeTodos","onToggle","todos","useState","isActive","setIsActive","className","type","classNames","active","length","onClick","changedTodosId","filter","todo","completed","map","id","currState","placeholder","value","e","target","disabled","Footer","filterStatus","onFilterChange","numberOfTodos","isCompletedTodos","onRemove","allCompletedTodosId","href","selected","All","Active","Completed","ErrorNotification","error","onError","useEffect","hidden","er","Get","Post","Delete","Patch","isEmpty","getErrorMessage","TodoItem","onClose","processedTodos","isEditMode","setIsEditMode","title","inputValue","setInputValue","handleFormDisplay","handleFormSubmit","htmlFor","checked","onBlur","autoFocus","onKeyUp","key","onDoubleClick","includes","TodoList","React","memo","USER_ID","App","setTodos","setError","setFilterStatus","setQuery","tempTodo","setTempTodo","setIsLoading","setProcessedTodos","visibleTodos","useMemo","some","getTodosFromServer","useCallback","userId","catch","addTodosToServer","addTodo","finally","removeTodosFromServer","todoId","removeTodo","currTodos","toggleTodoStatus","toggleTodo","updateTodoTitle","changeTodoTitle","handleRemove","forEach","handleToggle","handleTitleChange","targetTodo","find","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2403ef1.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\ninterface Post {\n  userId: number;\n  title: string;\n  completed: boolean;\n}\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Post) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable no-shadow */\nexport enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport enum ErrorType {\n  Get = 'get',\n  Post = 'post',\n  Delete = 'delete',\n  Patch = 'patch',\n  isEmpty = 'isEmpty',\n}\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  query: string;\n  onChange(value: string): void;\n  onSubmit(e: FormEvent<HTMLFormElement>): void;\n  isLoading: boolean;\n  activeTodos: Todo[];\n  onToggle(todoId: number[], completed: boolean): void;\n  todos: Todo[];\n};\n\nexport const Header: React.FC<Props> = ({\n  query,\n  onChange,\n  onSubmit,\n  isLoading,\n  activeTodos,\n  onToggle,\n  todos,\n}) => {\n  const [isActive, setIsActive] = useState(true);\n\n  const handleToggleAll = () => {\n    const changedTodosId = todos\n      .filter(todo => todo.completed === !isActive)\n      .map(todo => todo.id);\n\n    onToggle(changedTodosId, isActive);\n    setIsActive(currState => !currState);\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        className={classNames('todoapp__toggle-all', {\n          active: activeTodos.length === 0,\n        })}\n        onClick={handleToggleAll}\n      >\n        .\n      </button>\n\n      <form\n        onSubmit={onSubmit}\n      >\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={query}\n          onChange={(e) => onChange(e.target.value)}\n          disabled={isLoading}\n        />\n      </form>\n    </header>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Filter } from '../utils/enums';\n\ntype Props = {\n  filterStatus: Filter;\n  onFilterChange(status: Filter): void;\n  numberOfTodos: number | undefined;\n  isCompletedTodos: boolean;\n  onRemove(todoId: number[]): void;\n  allCompletedTodosId: number[];\n};\n\nexport const Footer: React.FC<Props> = ({\n  filterStatus,\n  onFilterChange,\n  numberOfTodos,\n  isCompletedTodos,\n  onRemove,\n  allCompletedTodosId,\n}) => {\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {numberOfTodos === 1 ? (\n          `${numberOfTodos} item left`\n        ) : (\n          `${numberOfTodos} items left`\n        )}\n      </span>\n\n      <nav className=\"filter\">\n        <a\n          href=\"#/\"\n          className={classNames(\n            'filter__link',\n            {\n              selected: filterStatus === Filter.All,\n            },\n          )}\n          onClick={() => onFilterChange(Filter.All)}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={classNames(\n            'filter__link',\n            {\n              selected: filterStatus === Filter.Active,\n            },\n          )}\n          onClick={() => onFilterChange(Filter.Active)}\n        >\n          Active\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={classNames(\n            'filter__link',\n            {\n              selected: filterStatus === Filter.Completed,\n            },\n          )}\n          onClick={() => onFilterChange(Filter.Completed)}\n        >\n          Completed\n        </a>\n      </nav>\n\n      {isCompletedTodos && (\n        <button\n          type=\"button\"\n          className=\"todoapp__clear-completed\"\n          onClick={() => {\n            onRemove(allCompletedTodosId);\n          }}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../utils/enums';\n\ntype Props = {\n  error: ErrorType | null,\n  onError(type: ErrorType | null): void,\n};\n\nexport const ErrorNotification: React.FC<Props> = ({ error, onError }) => {\n  useEffect(() => {\n    setTimeout(() => onError(null), 3000);\n  }, [error]);\n\n  function getErrorMessage(er: ErrorType | null) {\n    switch (er) {\n      case ErrorType.Get:\n        return 'Unable to load a todo';\n\n      case ErrorType.Post:\n        return 'Unable to add a todo';\n\n      case ErrorType.Delete:\n        return 'Unable to delete a todo';\n\n      case ErrorType.Patch:\n        return 'Unable to update a todo';\n\n      case ErrorType.isEmpty:\n        return 'Title can\\'t be empty';\n\n      default:\n        return '';\n    }\n  }\n\n  return (\n    <div className={classNames(\n      'notification',\n      'is-danger',\n      'is-light',\n      'has-text-weight-normal',\n      {\n        hidden: !error,\n      },\n    )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => onError(null)}\n      >\n        .\n      </button>\n      {getErrorMessage(error)}\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React, { KeyboardEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  onClose(todoId: number[]): void;\n  processedTodos: number[];\n  onToggle(todoId: number[], completed: boolean): void;\n  onChange(value: string, todoId: number): void\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  onClose,\n  processedTodos,\n  onToggle,\n  onChange,\n}) => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [inputValue, setInputValue] = useState(todo.title);\n\n  const handleFormDisplay = (value: boolean) => {\n    setIsEditMode(value);\n  };\n\n  const handleFormSubmit = (value: boolean) => {\n    onChange(inputValue, todo.id);\n    handleFormDisplay(value);\n  };\n\n  const handleCancelEditing = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      handleFormDisplay(false);\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        'todo',\n        {\n          completed: todo.completed,\n        },\n      )}\n    >\n      <label\n        htmlFor=\"toggle\"\n        className=\"todo__status-label\"\n        onClick={() => onToggle([todo.id], !todo.completed)}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={todo.completed}\n        />\n      </label>\n\n      {isEditMode\n        ? (\n          <form\n            onSubmit={() => handleFormSubmit(false)}\n            onBlur={() => handleFormSubmit(false)}\n          >\n            <input\n              type=\"text\"\n              className={`todo__title-field todo__title-field-${todo.id}`}\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyUp={(e) => handleCancelEditing(e)}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              className=\"todo__title\"\n              onDoubleClick={() => handleFormDisplay(true)}\n            >\n              {todo.title}\n            </span>\n\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              onClick={() => onClose([todo.id])}\n            >\n              ×\n            </button>\n          </>\n        )}\n\n      <div className={classNames('modal', 'overlay', {\n        'is-active': todo.id === 0 || processedTodos.includes(todo.id),\n      })}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  onClose(todoId: number[]): void;\n  processedTodos: number[];\n  onToggle(todoId: number[], completed: boolean): void;\n  onChange(value: string, todoId: number): void\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    onClose,\n    processedTodos,\n    onToggle,\n    onChange,\n  }) => {\n    return (\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            <TodoItem\n              todo={todo}\n              onClose={onClose}\n              processedTodos={processedTodos}\n              onToggle={onToggle}\n              onChange={onChange}\n            />\n          </li>\n        ))}\n      </ul>\n    );\n  },\n);\n","//* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  useEffect,\n  useState,\n  useMemo,\n  useCallback,\n  FormEvent,\n} from 'react';\nimport { UserWarning } from './UserWarning';\nimport {\n  getTodos,\n  addTodo,\n  removeTodo,\n  toggleTodo,\n  changeTodoTitle,\n} from './api/todos';\nimport { Todo } from './types/Todo';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { Filter, ErrorType } from './utils/enums';\nimport { TodoList } from './components/TodoList';\nimport { TodoItem } from './components/TodoItem';\n\nconst USER_ID = 10380;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState<ErrorType | null>(null);\n  const [filterStatus, setFilterStatus] = useState<Filter>(Filter.All);\n  const [query, setQuery] = useState('');\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [processedTodos, setProcessedTodos] = useState<number[]>([]);\n\n  function filterTodos() {\n    switch (filterStatus) {\n      case Filter.All:\n        return todos;\n      case Filter.Completed:\n        return todos.filter(todo => todo.completed);\n      case Filter.Active:\n        return todos.filter(todo => !todo.completed);\n      default:\n        return todos;\n    }\n  }\n\n  const visibleTodos = useMemo(filterTodos, [todos, filterStatus]);\n  const activeTodos = todos?.filter(todo => !todo.completed);\n  const isCompletedTodos = todos.some(todo => todo.completed);\n  const allCompletedTodosId = todos\n    .filter(todo => todo.completed)\n    .map(todo => todo.id);\n\n  const getTodosFromServer = useCallback(() => {\n    getTodos(USER_ID)\n      .then(data => setTodos(data))\n      .catch(() => setError(ErrorType.Get));\n  }, []);\n\n  const addTodosToServer = (title: string) => {\n    setIsLoading(true);\n    addTodo(USER_ID, title)\n      .then(data => {\n        setTodos([...todos, data]);\n      })\n      .catch(() => setError(ErrorType.Post))\n      .finally(() => {\n        setIsLoading(false);\n        setTempTodo(null);\n      });\n  };\n\n  const removeTodosFromServer = (todoId: number) => {\n    removeTodo(todoId)\n      .then(() => {\n        setTodos(currTodos => currTodos.filter(todo => todo.id !== todoId));\n      })\n      .catch(() => setError(ErrorType.Delete))\n      .finally(() => setProcessedTodos(\n        currState => currState.filter(id => id !== todoId),\n      ));\n  };\n\n  const toggleTodoStatus = (todoId: number, completed: boolean) => {\n    toggleTodo(todoId, completed)\n      .then(() => {\n        setTodos(currTodos => currTodos.map(todo => {\n          if (todo.id !== todoId) {\n            return todo;\n          }\n\n          return {\n            ...todo,\n            completed,\n          };\n        }));\n      })\n      .catch(() => setError(ErrorType.Patch))\n      .finally(() => setProcessedTodos(\n        currState => currState.filter(id => id !== todoId),\n      ));\n  };\n\n  const updateTodoTitle = (todoId: number, title: string) => {\n    changeTodoTitle(todoId, title)\n      .then(() => {\n        setTodos(currTodos => currTodos.map(todo => {\n          if (todo.id !== todoId) {\n            return todo;\n          }\n\n          return {\n            ...todo,\n            title,\n          };\n        }));\n      })\n      .catch(() => setError(ErrorType.Patch))\n      .finally(() => setProcessedTodos(\n        currState => currState.filter(id => id !== todoId),\n      ));\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!query) {\n      setError(ErrorType.isEmpty);\n\n      return;\n    }\n\n    setError(null);\n    addTodosToServer(query);\n    setQuery('');\n    setTempTodo({\n      id: 0,\n      userId: USER_ID,\n      title: query,\n      completed: false,\n    });\n  };\n\n  const handleRemove = (todoId: number[]) => {\n    setProcessedTodos(currState => [...currState, ...todoId]);\n    todoId.forEach(id => {\n      removeTodosFromServer(id);\n    });\n  };\n\n  const handleToggle = (todoId: number[], completed: boolean) => {\n    setProcessedTodos(currState => [...currState, ...todoId]);\n    todoId.forEach(id => {\n      toggleTodoStatus(id, completed);\n    });\n  };\n\n  const handleTitleChange = (value: string, todoId: number) => {\n    const targetTodo = todos.find(todo => todo.id === todoId);\n\n    if (targetTodo?.title === value) {\n      return;\n    }\n\n    setProcessedTodos(currState => [...currState, todoId]);\n    if (!value) {\n      removeTodosFromServer(todoId);\n\n      return;\n    }\n\n    updateTodoTitle(todoId, value);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          query={query}\n          onChange={setQuery}\n          onSubmit={handleSubmit}\n          isLoading={isLoading}\n          activeTodos={activeTodos}\n          onToggle={handleToggle}\n          todos={todos}\n        />\n\n        {!!todos.length && (\n          <>\n            <section className=\"todoapp__main\">\n              {visibleTodos && (\n                <TodoList\n                  todos={visibleTodos}\n                  onClose={handleRemove}\n                  processedTodos={processedTodos}\n                  onToggle={handleToggle}\n                  onChange={handleTitleChange}\n                />\n              )}\n              {tempTodo && (\n                <TodoItem\n                  todo={tempTodo}\n                  onClose={handleRemove}\n                  processedTodos={processedTodos}\n                  onToggle={handleToggle}\n                  onChange={handleTitleChange}\n                />\n              )}\n            </section>\n\n            <Footer\n              filterStatus={filterStatus}\n              onFilterChange={setFilterStatus}\n              numberOfTodos={activeTodos?.length}\n              isCompletedTodos={isCompletedTodos}\n              onRemove={handleRemove}\n              allCompletedTodosId={allCompletedTodosId}\n            />\n          </>\n        )}\n      </div>\n\n      <ErrorNotification error={error} onError={setError} />\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (userId: number, title: string) => {\n  return client.post<Todo>(`/todos?userId=${userId}`, {\n    title,\n    completed: false,\n    userId,\n  });\n};\n\nexport const removeTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const toggleTodo = (todoId: number, completed: boolean) => {\n  return client.patch(`/todos/${todoId}`, { completed });\n};\n\nexport const changeTodoTitle = (todoId: number, title: string) => {\n  return client.patch(`/todos/${todoId}`, { title });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}